#pragma once
#include "tlhelp32.h"
#include "resource.h"

#if !defined(NT_SUCCESS)
#define NT_SUCCESS(Status) ((NTSTATUS)(Status) >= 0)
#endif

#define RPC_EXCEPTION (RpcExceptionCode() != STATUS_ACCESS_VIOLATION) && \
	(RpcExceptionCode() != STATUS_DATATYPE_MISALIGNMENT) && \
	(RpcExceptionCode() != STATUS_PRIVILEGED_INSTRUCTION) && \
	(RpcExceptionCode() != STATUS_ILLEGAL_INSTRUCTION) && \
	(RpcExceptionCode() != STATUS_BREAKPOINT) && \
	(RpcExceptionCode() != STATUS_STACK_OVERFLOW) && \
	(RpcExceptionCode() != STATUS_IN_PAGE_ERROR) && \
	(RpcExceptionCode() != STATUS_ASSERTION_FAILURE) && \
	(RpcExceptionCode() != STATUS_STACK_BUFFER_OVERRUN) && \
	(RpcExceptionCode() != STATUS_GUARD_PAGE_VIOLATION)

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef wchar_t* STRING_HANDLE;
typedef void* PRINTER_HANDLE;

typedef struct _DEVMODE_CONTAINER {
	DWORD cbBuf;
	BYTE* pDevMode;
} DEVMODE_CONTAINER;

typedef struct __DRIVER_INFO_2 {
	DWORD cVersion;
	DWORD NameOffset;
	DWORD EnvironmentOffset;
	DWORD DriverPathOffset;
	DWORD DataFileOffset;
	DWORD ConfigFileOffset;
} _DRIVER_INFO_2, * _PDRIVER_INFO_2;

typedef struct _RPC_DRIVER_INFO_3 {
	DWORD cVersion;
	wchar_t* pName;
	wchar_t* pEnvironment;
	wchar_t* pDriverPath;
	wchar_t* pDataFile;
	wchar_t* pConfigFile;
	wchar_t* pHelpFile;
	wchar_t* pMonitorName;
	wchar_t* pDefaultDataType;
	DWORD cchDependentFiles;
	wchar_t* pDependentFiles;
} RPC_DRIVER_INFO_3;

typedef struct _RPC_DRIVER_INFO_4 {
	DWORD cVersion;
	wchar_t* pName;
	wchar_t* pEnvironment;
	wchar_t* pDriverPath;
	wchar_t* pDataFile;
	wchar_t* pConfigFile;
	wchar_t* pHelpFile;
	wchar_t* pMonitorName;
	wchar_t* pDefaultDataType;
	DWORD cchDependentFiles;
	wchar_t* pDependentFiles;
	DWORD cchPreviousNames;
	wchar_t* pszzPreviousNames;
} RPC_DRIVER_INFO_4;

typedef struct _RPC_DRIVER_INFO_6 {
	DWORD cVersion;
	wchar_t* pName;
	wchar_t* pEnvironment;
	wchar_t* pDriverPath;
	wchar_t* pDataFile;
	wchar_t* pConfigFile;
	wchar_t* pHelpFile;
	wchar_t* pMonitorName;
	wchar_t* pDefaultDataType;
	DWORD cchDependentFiles;
	wchar_t* pDependentFiles;
	DWORD cchPreviousNames;
	wchar_t* pszzPreviousNames;
	FILETIME ftDriverDate;
	DWORDLONG dwlDriverVersion;
	wchar_t* pMfgName;
	wchar_t* pOEMUrl;
	wchar_t* pHardwareID;
	wchar_t* pProvider;
} RPC_DRIVER_INFO_6;

typedef struct _RPC_DRIVER_INFO_8 {
	DWORD cVersion;
	wchar_t* pName;
	wchar_t* pEnvironment;
	wchar_t* pDriverPath;
	wchar_t* pDataFile;
	wchar_t* pConfigFile;
	wchar_t* pHelpFile;
	wchar_t* pMonitorName;
	wchar_t* pDefaultDataType;
	DWORD cchDependentFiles;
	wchar_t* pDependentFiles;
	DWORD cchPreviousNames;
	wchar_t* pszzPreviousNames;
	FILETIME ftDriverDate;
	DWORDLONG dwlDriverVersion;
	wchar_t* pMfgName;
	wchar_t* pOEMUrl;
	wchar_t* pHardwareID;
	wchar_t* pProvider;
	wchar_t* pPrintProcessor;
	wchar_t* pVendorSetup;
	DWORD cchColorProfiles;
	wchar_t* pszzColorProfiles;
	wchar_t* pInfPath;
	DWORD dwPrinterDriverAttributes;
	DWORD cchCoreDependencies;
	wchar_t* pszzCoreDriverDependencies;
	FILETIME ftMinInboxDriverVerDate;
	DWORDLONG dwlMinInboxDriverVerVersion;
} RPC_DRIVER_INFO_8;

typedef struct _DRIVER_CONTAINER {
	DWORD Level;
	union {
		DRIVER_INFO_1* pNotUsed;
		DRIVER_INFO_2* Level2;
		RPC_DRIVER_INFO_3* Level3;
		RPC_DRIVER_INFO_4* Level4;
		RPC_DRIVER_INFO_6* Level6;
		RPC_DRIVER_INFO_8* Level8;
	} DriverInfo;
} DRIVER_CONTAINER;

typedef struct _SPLCLIENT_INFO_1 {
	DWORD dwSize;
	DWORD dwBuildNum;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	unsigned short wProcessorArchitecture;
} SPLCLIENT_INFO_1;

typedef struct _SPLCLIENT_INFO_2 {
	LONG_PTR notUsed;
} SPLCLIENT_INFO_2;

typedef struct _SPLCLIENT_INFO_3 {
	unsigned int cbSize;
	DWORD dwFlags;
	DWORD dwSize;
	wchar_t* pMachineName;
	wchar_t* pUserName;
	DWORD dwBuildNum;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	unsigned short wProcessorArchitecture;
	unsigned __int64 hSplPrinter;
} SPLCLIENT_INFO_3;

typedef struct _SPLCLIENT_CONTAINER {
	DWORD Level;
	union {
		SPLCLIENT_INFO_1* pClientInfo1;
		SPLCLIENT_INFO_2* pNotUsed;
		SPLCLIENT_INFO_3* pClientInfo3;
	} 	ClientInfo;
} SPLCLIENT_CONTAINER;

#define _WIN_BUILD_XP			2600
#define _WIN_BUILD_2K3			3790
#define _WIN_BUILD_VISTA		6000
#define _WIN_BUILD_7			7600
#define _WIN_BUILD_8			9200
#define _WIN_BUILD_BLUE			9600
#define _WIN_BUILD_10_1507		10240
#define _WIN_BUILD_10_1511		10586
#define _WIN_BUILD_10_1607		14393
#define _WIN_BUILD_10_1703		15063
#define _WIN_BUILD_10_1709		16299
#define _WIN_BUILD_10_1803		17134
#define _WIN_BUILD_10_1809		17763
#define _WIN_BUILD_10_1903		18362
#define _WIN_BUILD_10_1909		18363
#define _WIN_BUILD_10_2004		19041
#define _WIN_BUILD_10_20H2		19042
#define _WIN_BUILD_2022			20348

#define _WIN_MIN_BUILD_XP		2500
#define _WIN_MIN_BUILD_2K3		3000
#define _WIN_MIN_BUILD_VISTA	5000
#define _WIN_MIN_BUILD_7		7000
#define _WIN_MIN_BUILD_8		8000
#define _WIN_MIN_BUILD_BLUE		9400
#define _WIN_MIN_BUILD_10		9800
#define _WIN_MIN_BUILD_11		22000
#define APD_INSTALL_WARNED_DRIVER	0x00008000

#define CODECHECK				L"CodeCheck"

//const UUID PAR_ObjectUUID;
const UUID PAR_ObjectUUID = { 0x9940ca8e, 0x512f, 0x4c58, {0x88, 0xa9, 0x61, 0x09, 0x8d, 0x68, 0x96, 0xbd} };

#if defined(_M_X64) || defined(_M_ARM64) // TODO:ARM64
typedef struct _ms2Dpar_MIDL_TYPE_FORMAT_STRING {
	SHORT Pad;
	UCHAR Format[751];
} ms2Dpar_MIDL_TYPE_FORMAT_STRING;

typedef struct _ms2Dpar_MIDL_PROC_FORMAT_STRING {
	SHORT Pad;
	UCHAR Format[387];
} ms2Dpar_MIDL_PROC_FORMAT_STRING;

extern const ms2Dpar_MIDL_TYPE_FORMAT_STRING ms2Dpar__MIDL_TypeFormatString;
extern const ms2Dpar_MIDL_PROC_FORMAT_STRING ms2Dpar__MIDL_ProcFormatString;
static const RPC_CLIENT_INTERFACE IRemoteWinspool___RpcClientInterface = { sizeof(RPC_CLIENT_INTERFACE), {{0x76f03f96, 0xcdfd, 0x44fc, {0xa2, 0x2c, 0x64, 0x95, 0x0a, 0x00, 0x12, 0x09}}, {1, 0}}, {{0x8a885d04, 0x1ceb, 0x11c9, {0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60}}, {2, 0}}, 0, 0, 0, 0, 0, 0x00000000 };
static RPC_BINDING_HANDLE IRemoteWinspool__MIDL_AutoBindHandle;
static const MIDL_STUB_DESC IRemoteWinspool_StubDesc = { (void*)&IRemoteWinspool___RpcClientInterface, MIDL_user_allocate, MIDL_user_free, &IRemoteWinspool__MIDL_AutoBindHandle, 0, 0, 0, 0, ms2Dpar__MIDL_TypeFormatString.Format, 1, 0x60000, 0, 0x8000253, 0, 0, 0, 0x1, 0, 0, 0 };

void __RPC_FAR* __RPC_USER midl_user_allocate(size_t cBytes) {
	return LocalAlloc(LPTR, cBytes);
}

void __RPC_USER midl_user_free(void __RPC_FAR* p) {
	LocalFree(p);
}

DWORD RpcAsyncOpenPrinter(handle_t hRemoteBinding, wchar_t* pPrinterName, PRINTER_HANDLE* pHandle, wchar_t* pDatatype, DEVMODE_CONTAINER* pDevModeContainer, DWORD AccessRequired, SPLCLIENT_CONTAINER* pClientInfo)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[0], hRemoteBinding, pPrinterName, pHandle, pDatatype, pDevModeContainer, AccessRequired, pClientInfo).Simple;
}
DWORD RpcAsyncClosePrinter(PRINTER_HANDLE* phPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[72], phPrinter).Simple;
}
DWORD RpcAsyncAddPrinterDriver(handle_t hRemoteBinding, wchar_t* pName, DRIVER_CONTAINER* pDriverContainer, DWORD dwFileCopyFlags)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[116], hRemoteBinding, pName, pDriverContainer, dwFileCopyFlags).Simple;
}
DWORD RpcAsyncEnumPrinterDrivers(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, DWORD Level, unsigned char* pDrivers, DWORD cbBuf, DWORD* pcbNeeded, DWORD* pcReturned)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[170], hRemoteBinding, pName, pEnvironment, Level, pDrivers, cbBuf, pcbNeeded, pcReturned).Simple;
}
DWORD RpcAsyncGetPrinterDriverDirectory(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, DWORD Level, unsigned char* pDriverDirectory, DWORD cbBuf, DWORD* pcbNeeded)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[248], hRemoteBinding, pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded).Simple;
}
DWORD RpcAsyncDeletePrinterDriverEx(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, wchar_t* pDriverName, DWORD dwDeleteFlag, DWORD dwVersionNum)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[320], hRemoteBinding, pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionNum).Simple;
}
static const ms2Dpar_MIDL_PROC_FORMAT_STRING ms2Dpar__MIDL_ProcFormatString = { 0, {
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x46, 0x07, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00,
	0x08, 0x00, 0x02, 0x00, 0x10, 0x01, 0x10, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x18, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x20, 0x00, 0x1e, 0x00, 0x48, 0x00, 0x28, 0x00, 0x08, 0x00, 0x0b, 0x01, 0x30, 0x00,
	0xa2, 0x00, 0x70, 0x00, 0x38, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x10, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x40, 0x00, 0x44, 0x02, 0x0a, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0xb6, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x28, 0x00, 0x32, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x46, 0x04, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x10, 0x00, 0xc6, 0x02, 0x48, 0x00,
	0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x48, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x47, 0x08, 0x0a, 0x07,
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x10, 0x00, 0x02, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x20, 0x00, 0xd6, 0x02,
	0x48, 0x00, 0x28, 0x00, 0x08, 0x00, 0x50, 0x21, 0x30, 0x00, 0x08, 0x00, 0x50, 0x21, 0x38, 0x00, 0x08, 0x00, 0x70, 0x00, 0x40, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00,
	0x40, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x24, 0x00, 0x47, 0x07, 0x0a, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x10, 0x00,
	0x02, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x20, 0x00, 0xd6, 0x02, 0x48, 0x00, 0x28, 0x00, 0x08, 0x00, 0x50, 0x21, 0x30, 0x00, 0x08, 0x00, 0x70, 0x00, 0x38, 0x00, 0x08, 0x00,
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x38, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x46, 0x06, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00,
	0x08, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x10, 0x00, 0xec, 0x02, 0x0b, 0x01, 0x18, 0x00, 0xec, 0x02, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x00, 0x28, 0x00, 0x08, 0x00, 0x70, 0x00, 0x30, 0x00,
	0x08, 0x00, 0x00,
} };
static const ms2Dpar_MIDL_TYPE_FORMAT_STRING ms2Dpar__MIDL_TypeFormatString = { 0, {
	0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xa0, 0x00, 0x00, 0x11, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x1a, 0x03,
	0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x40, 0x36, 0x5b, 0x12, 0x00, 0xe6, 0xff, 0x11, 0x00, 0x72, 0x00, 0x2b, 0x09, 0x09, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x02, 0x00, 0x08, 0x00, 0x03, 0x30,
	0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x28, 0x00, 0x00, 0x00, 0x0c, 0x00,
	0x08, 0x40, 0x36, 0x36, 0x08, 0x08, 0x08, 0x06, 0x3e, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x5b,
	0x12, 0x00, 0x02, 0x00, 0x1a, 0x07, 0x38, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x08, 0x08, 0x40, 0x36, 0x36, 0x08, 0x08, 0x08, 0x06, 0x3e, 0x0b, 0x5c, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08,
	0x25, 0x5c, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x4c, 0x00, 0x84, 0xff, 0x5c, 0x5b, 0x11, 0x04, 0x02, 0x00, 0x30, 0xe1, 0x00, 0x00, 0x11, 0x00, 0x0a, 0x02, 0x2b, 0x09,
	0x09, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x02, 0x00, 0x08, 0x00, 0x06, 0x30, 0x01, 0x00, 0x00, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x50, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x94, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x01, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x36, 0x5b,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x30, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x48, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x03, 0x58, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0xbc, 0xff, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00,
	0x58, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x03, 0x68, 0x00, 0x00, 0x00, 0x14, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08, 0x40, 0x36, 0x5c, 0x5b,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x00, 0x6e, 0xff, 0x12, 0x00, 0xb4, 0xff, 0x12, 0x00, 0x0a, 0x00, 0x15, 0x03, 0x08, 0x00, 0x08, 0x08, 0x5c, 0x5b, 0x1a, 0x07, 0x98, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x08, 0x40, 0x36, 0x36,
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08, 0x40, 0x36, 0x4c, 0x00, 0xde, 0xff, 0x0b, 0x36, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x18, 0xff, 0x12, 0x00, 0x5e, 0xff, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x1a, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0xa8, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1b, 0x01,
	0x02, 0x00, 0x19, 0x00, 0xc4, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08,
	0x40, 0x36, 0x4c, 0x00, 0x68, 0xff, 0x0b, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x36, 0x08, 0x08, 0x36, 0x4c, 0x00, 0x56, 0xff, 0x0b, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x94, 0xfe, 0x12, 0x00,
	0xda, 0xfe, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x76, 0xff, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x00, 0x7a, 0xff, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x4c, 0x00, 0xec, 0xfd, 0x5c, 0x5b, 0x12, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x29, 0x00,
	0x28, 0x00, 0x00, 0x00, 0x02, 0x5b, 0x11, 0x0c, 0x08, 0x5c, 0x11, 0x08, 0x25, 0x5c, 0x00,
} };
#elif defined(_M_IX86)
typedef struct _ms2Dpar_MIDL_TYPE_FORMAT_STRING {
	SHORT Pad;
	UCHAR Format[1091];
} ms2Dpar_MIDL_TYPE_FORMAT_STRING;

typedef struct _ms2Dpar_MIDL_PROC_FORMAT_STRING {
	SHORT Pad;
	UCHAR Format[375];
} ms2Dpar_MIDL_PROC_FORMAT_STRING;

extern const ms2Dpar_MIDL_TYPE_FORMAT_STRING ms2Dpar__MIDL_TypeFormatString;
extern const ms2Dpar_MIDL_PROC_FORMAT_STRING ms2Dpar__MIDL_ProcFormatString;
static const RPC_CLIENT_INTERFACE IRemoteWinspool___RpcClientInterface = { sizeof(RPC_CLIENT_INTERFACE), {{0x76f03f96, 0xcdfd, 0x44fc, {0xa2, 0x2c, 0x64, 0x95, 0x0a, 0x00, 0x12, 0x09}}, {1, 0}}, {{0x8a885d04, 0x1ceb, 0x11c9, {0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60}}, {2, 0}}, 0, 0, 0, 0, 0, 0x00000000 };
static RPC_BINDING_HANDLE IRemoteWinspool__MIDL_AutoBindHandle;
static const MIDL_STUB_DESC IRemoteWinspool_StubDesc = { (void*)&IRemoteWinspool___RpcClientInterface, MIDL_user_allocate, MIDL_user_free, &IRemoteWinspool__MIDL_AutoBindHandle, 0, 0, 0, 0, ms2Dpar__MIDL_TypeFormatString.Format, 1, 0x60000, 0, 0x8000253, 0, 0, 0, 0x1, 0, 0, 0 };
#pragma optimize("", off) 
DWORD RpcAsyncOpenPrinter(handle_t hRemoteBinding, wchar_t* pPrinterName, PRINTER_HANDLE* pHandle, wchar_t* pDatatype, DEVMODE_CONTAINER* pDevModeContainer, DWORD AccessRequired, SPLCLIENT_CONTAINER* pClientInfo)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[0], (unsigned char*)&hRemoteBinding).Simple;
}
DWORD RpcAsyncClosePrinter(PRINTER_HANDLE* phPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[70], (unsigned char*)&phPrinter).Simple;
}
DWORD RpcAsyncAddPrinterDriver(handle_t hRemoteBinding, wchar_t* pName, DRIVER_CONTAINER* pDriverContainer, DWORD dwFileCopyFlags)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[112], (unsigned char*)&hRemoteBinding).Simple;
}
DWORD RpcAsyncEnumPrinterDrivers(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, DWORD Level, unsigned char* pDrivers, DWORD cbBuf, DWORD* pcbNeeded, DWORD* pcReturned)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[164], (unsigned char*)&hRemoteBinding).Simple;
}
DWORD RpcAsyncGetPrinterDriverDirectory(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, DWORD Level, unsigned char* pDriverDirectory, DWORD cbBuf, DWORD* pcbNeeded)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[240], (unsigned char*)&hRemoteBinding).Simple;
}
DWORD RpcAsyncDeletePrinterDriverEx(handle_t hRemoteBinding, wchar_t* pName, wchar_t* pEnvironment, wchar_t* pDriverName, DWORD dwDeleteFlag, DWORD dwVersionNum)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&IRemoteWinspool_StubDesc, (PFORMAT_STRING)&ms2Dpar__MIDL_ProcFormatString.Format[310], (unsigned char*)&hRemoteBinding).Simple;
}
#pragma optimize("", on)
static const ms2Dpar_MIDL_PROC_FORMAT_STRING ms2Dpar__MIDL_ProcFormatString = { 0, {
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x46, 0x07, 0x08, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00,
	0x02, 0x00, 0x10, 0x01, 0x08, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x1e, 0x00, 0x48, 0x00, 0x14, 0x00, 0x08, 0x00, 0x0b, 0x01, 0x18, 0x00, 0xac, 0x00,
	0x70, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x08, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x40, 0x00, 0x44, 0x02, 0x08, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0xbe, 0x00, 0x70, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x14, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x08, 0x00, 0x46, 0x04, 0x08, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x1c, 0x04, 0x48, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x70, 0x00,
	0x10, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x24, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x47, 0x08, 0x08, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x48, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x10, 0x00, 0x2a, 0x04, 0x48, 0x00, 0x14, 0x00, 0x08, 0x00, 0x50, 0x21,
	0x18, 0x00, 0x08, 0x00, 0x50, 0x21, 0x1c, 0x00, 0x08, 0x00, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x24, 0x00, 0x47, 0x07, 0x08, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x48, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x1b, 0x00,
	0x10, 0x00, 0x2a, 0x04, 0x48, 0x00, 0x14, 0x00, 0x08, 0x00, 0x50, 0x21, 0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x1c, 0x00,
	0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x46, 0x06, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x40, 0x04, 0x0b, 0x01,
	0x0c, 0x00, 0x40, 0x04, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x48, 0x00, 0x14, 0x00, 0x08, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00,
} };
static const ms2Dpar_MIDL_TYPE_FORMAT_STRING ms2Dpar__MIDL_TypeFormatString = { 0, {
	0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xa0, 0x00, 0x00, 0x11, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x16, 0x03,
	0x08, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x00, 0xe6, 0xff, 0x5b, 0x08, 0x08, 0x5b, 0x11, 0x00, 0x78, 0x00, 0x2b, 0x09, 0x09, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x02, 0x00,
	0x04, 0x00, 0x03, 0x30, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x1c, 0x00,
	0x00, 0x00, 0x0c, 0x00, 0x08, 0x36, 0x36, 0x08, 0x08, 0x08, 0x06, 0x3e, 0x5c, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x02, 0x00, 0x15, 0x03, 0x04, 0x00, 0x08, 0x5b,
	0x12, 0x00, 0x02, 0x00, 0x16, 0x07, 0x30, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x06, 0x42, 0x0b, 0x5c, 0x5b, 0x1a, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x00, 0x7f, 0xff, 0x5b, 0x11, 0x04, 0x02, 0x00, 0x30, 0xe1,
	0x00, 0x00, 0x11, 0x00, 0x58, 0x03, 0x2b, 0x09, 0x09, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x06, 0x30, 0x01, 0x00, 0x00, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00, 0x00, 0x00, 0xea, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6e, 0x01, 0x08, 0x00, 0x00, 0x00, 0x20, 0x02, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x16, 0x03,
	0x04, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x5c, 0x5b, 0x12, 0x00, 0x02, 0x00, 0x16, 0x03, 0x18, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00,
	0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x5b, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00,
	0x24, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x16, 0x03, 0x2c, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00,
	0x28, 0x00, 0x12, 0x00, 0x96, 0xff, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x5c, 0x5b, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x2c, 0x00,
	0x01, 0x00, 0x05, 0x5b, 0x16, 0x03, 0x34, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00,
	0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00,
	0x12, 0x00, 0x18, 0xff, 0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00, 0x8c, 0xff, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x5c, 0x5b, 0x12, 0x00,
	0x0a, 0x00, 0x15, 0x03, 0x08, 0x00, 0x08, 0x08, 0x5c, 0x5b, 0x16, 0x07, 0x58, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08,
	0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0x92, 0xfe, 0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00, 0x06, 0xff, 0x46, 0x5c, 0x48, 0x00, 0x48, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x4c, 0x00, 0x4c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x50, 0x00, 0x50, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x54, 0x00, 0x54, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x56, 0xff, 0x40, 0x0b, 0x08, 0x08, 0x08, 0x08, 0x5c, 0x5b, 0x12, 0x00, 0x1a, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00,
	0x60, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x70, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x16, 0x07, 0x88, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08,
	0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0xca, 0xfd, 0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00, 0x3e, 0xfe, 0x46, 0x5c, 0x48, 0x00,
	0x48, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x4c, 0x00, 0x4c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x50, 0x00, 0x50, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x54, 0x00, 0x54, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x58, 0x00, 0x58, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x5c, 0x00, 0x5c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x64, 0x00, 0x64, 0x00, 0x12, 0x00,
	0x3a, 0xff, 0x46, 0x5c, 0x68, 0x00, 0x68, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x74, 0x00, 0x74, 0x00, 0x12, 0x00, 0x32, 0xff, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x5c, 0xfe, 0x40, 0x0b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x4a, 0xfe, 0x0b, 0x5b, 0x1a, 0x03, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x00, 0x9f, 0xfc, 0x5b, 0x12, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x29, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x5b, 0x11, 0x0c, 0x08, 0x5c, 0x11, 0x08,
	0x25, 0x5c, 0x00,
} };
#endif

handle_t hSpoolHandle = NULL;
handle_t __RPC_USER STRING_HANDLE_bind(IN STRING_HANDLE Name) { return hSpoolHandle; }
void __RPC_USER STRING_HANDLE_unbind(IN STRING_HANDLE Name, handle_t hSpool) {}
typedef struct _ms2Drprn_MIDL_TYPE_FORMAT_STRING {
	SHORT Pad;
#if defined(_M_X64) || defined(_M_ARM64) // TODO:ARM64
	UCHAR Format[649];
#elif defined(_M_IX86)
	UCHAR Format[985];
#endif
} ms2Drprn_MIDL_TYPE_FORMAT_STRING;

typedef struct _ms2Drprn_MIDL_PROC_FORMAT_STRING {
	SHORT Pad;
#if defined(_M_X64) || defined(_M_ARM64) // TODO:ARM64
	UCHAR Format[515];
#elif defined(_M_IX86)
	UCHAR Format[499];
#endif
} ms2Drprn_MIDL_PROC_FORMAT_STRING;

extern const ms2Drprn_MIDL_TYPE_FORMAT_STRING ms2Drprn__MIDL_TypeFormatString;
extern const ms2Drprn_MIDL_PROC_FORMAT_STRING ms2Drprn__MIDL_ProcFormatString;
static const RPC_PROTSEQ_ENDPOINT __RpcProtseqEndpoint[] = { {(unsigned char*)"ncacn_np", (unsigned char*)"\\pipe\\spoolss"} };
static const RPC_CLIENT_INTERFACE winspool___RpcClientInterface = { sizeof(RPC_CLIENT_INTERFACE), {{0x12345678, 0x1234, 0xabcd, {0xef, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab}}, {1, 0}}, {{0x8a885d04, 0x1ceb, 0x11c9, {0x9f, 0xe8, 0x08, 0x00, 0x2b, 0x10, 0x48, 0x60}}, {2, 0}}, 0, 1, (RPC_PROTSEQ_ENDPOINT*)__RpcProtseqEndpoint, 0, 0, 0x00000000 };
RPC_IF_HANDLE winspool_v1_0_c_ifspec = (RPC_IF_HANDLE)&winspool___RpcClientInterface;
static RPC_BINDING_HANDLE winspool__MIDL_AutoBindHandle;
static const GENERIC_BINDING_ROUTINE_PAIR BindingRoutines[] = { {(GENERIC_BINDING_ROUTINE)STRING_HANDLE_bind, (GENERIC_UNBIND_ROUTINE)STRING_HANDLE_unbind} };
static const MIDL_STUB_DESC winspool_StubDesc = { (void*)&winspool___RpcClientInterface, MIDL_user_allocate, MIDL_user_free, &winspool__MIDL_AutoBindHandle, 0, BindingRoutines, 0, 0, ms2Drprn__MIDL_TypeFormatString.Format, 1, 0x60000, 0, 0x801026e, 0, 0, 0, 0x1, 0, 0, 0 };

#if defined(_M_X64) || defined(_M_ARM64) // TODO:ARM64
DWORD RpcOpenPrinter(STRING_HANDLE pPrinterName, PRINTER_HANDLE* pHandle, wchar_t* pDatatype, DEVMODE_CONTAINER* pDevModeContainer, DWORD AccessRequired)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[0], pPrinterName, pHandle, pDatatype, pDevModeContainer, AccessRequired).Simple;
}
DWORD RpcEnumPrinterDrivers(STRING_HANDLE pName, wchar_t* pEnvironment, DWORD Level, BYTE* pDrivers, DWORD cbBuf, DWORD* pcbNeeded, DWORD* pcReturned)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[68], pName, pEnvironment, Level, pDrivers, cbBuf, pcbNeeded, pcReturned).Simple;
}
DWORD RpcGetPrinterDriverDirectory(STRING_HANDLE pName, wchar_t* pEnvironment, DWORD Level, BYTE* pDriverDirectory, DWORD cbBuf, DWORD* pcbNeeded)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[148], pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded).Simple;
}
DWORD RpcClosePrinter(PRINTER_HANDLE* phPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[222], phPrinter).Simple;
}
DWORD RpcFindClosePrinterChangeNotification(PRINTER_HANDLE hPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[266], hPrinter).Simple;
}
DWORD RpcRemoteFindFirstPrinterChangeNotification(PRINTER_HANDLE hPrinter, DWORD fdwFlags, DWORD fdwOptions, wchar_t* pszLocalMachine, DWORD dwPrinterLocal, DWORD cbBuffer, BYTE* pBuffer)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[310], hPrinter, fdwFlags, fdwOptions, pszLocalMachine, dwPrinterLocal, cbBuffer, pBuffer).Simple;
}
DWORD RpcDeletePrinterDriverEx(STRING_HANDLE pName, wchar_t* pEnvironment, wchar_t* pDriverName, DWORD dwDeleteFlag, DWORD dwVersionNum)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[390], pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionNum).Simple;
}
DWORD RpcAddPrinterDriverEx(STRING_HANDLE pName, DRIVER_CONTAINER* pDriverContainer, DWORD dwFileCopyFlags)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[458], pName, pDriverContainer, dwFileCopyFlags).Simple;
}

static const ms2Drprn_MIDL_PROC_FORMAT_STRING ms2Drprn__MIDL_ProcFormatString = { 0, {
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x31, 0x08, 0x00, 0x00, 0x00, 0x5c, 0x08, 0x00, 0x40, 0x00, 0x46, 0x06, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x01, 0x08, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x10, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x18, 0x00, 0x1e, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x00,
	0x28, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x40, 0x00, 0x31, 0x08, 0x00, 0x00, 0x00, 0x5c, 0x10, 0x00, 0x40, 0x00, 0x47, 0x08, 0x0a, 0x07, 0x01, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x2e, 0x00, 0x48, 0x00, 0x20, 0x00,
	0x08, 0x00, 0x50, 0x21, 0x28, 0x00, 0x08, 0x00, 0x50, 0x21, 0x30, 0x00, 0x08, 0x00, 0x70, 0x00, 0x38, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x38, 0x00, 0x31, 0x08,
	0x00, 0x00, 0x00, 0x5c, 0x10, 0x00, 0x24, 0x00, 0x47, 0x07, 0x0a, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00,
	0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x2e, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x50, 0x21, 0x28, 0x00, 0x08, 0x00, 0x70, 0x00, 0x30, 0x00, 0x08, 0x00, 0x00, 0x48,
	0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x10, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x40, 0x00, 0x44, 0x02, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01,
	0x00, 0x00, 0x46, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x10, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x08, 0x00, 0x44, 0x02,
	0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x40, 0x00,
	0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x08, 0x00, 0x47, 0x08, 0x0a, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x48, 0x00, 0x08, 0x00,
	0x08, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x18, 0x00, 0x02, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x88, 0x00, 0x28, 0x00, 0x4e, 0x00, 0x1b, 0x00, 0x30, 0x00, 0x58, 0x00,
	0x70, 0x00, 0x38, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x30, 0x00, 0x31, 0x08, 0x00, 0x00, 0x00, 0x5c, 0x10, 0x00, 0x08, 0x00, 0x46, 0x06, 0x0a, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x6a, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x6a, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x48, 0x00,
	0x20, 0x00, 0x08, 0x00, 0x70, 0x00, 0x28, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x20, 0x00, 0x31, 0x08, 0x00, 0x00, 0x00, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x46, 0x04,
	0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x78, 0x02, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x70, 0x00, 0x18, 0x00,
	0x08, 0x00, 0x00,
} };
static const ms2Drprn_MIDL_TYPE_FORMAT_STRING ms2Drprn__MIDL_TypeFormatString = { 0, {
	0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xa0, 0x00, 0x00, 0x11, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x1a, 0x03,
	0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x40, 0x36, 0x5b, 0x12, 0x00, 0xe6, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x29, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x5b, 0x11, 0x0c,
	0x08, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xe1, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x12, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x01, 0x00,
	0x29, 0x00, 0x28, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x11, 0x08, 0x25, 0x5c, 0x11, 0x00, 0x0a, 0x02, 0x2b, 0x09, 0x09, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x02, 0x00, 0x08, 0x00, 0x06, 0x30, 0x01, 0x00,
	0x00, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x50, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x40, 0x01, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x30, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00,
	0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x48, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x03, 0x58, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
	0x08, 0x40, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0xbc, 0xff, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x58, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x03, 0x68, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08, 0x40, 0x36, 0x5c, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08,
	0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x6e, 0xff, 0x12, 0x00, 0xb4, 0xff, 0x12, 0x00, 0x0a, 0x00, 0x15, 0x03,
	0x08, 0x00, 0x08, 0x08, 0x5c, 0x5b, 0x1a, 0x07, 0x98, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08, 0x40, 0x36, 0x4c, 0x00,
	0xde, 0xff, 0x0b, 0x36, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x18, 0xff, 0x12, 0x00, 0x5e, 0xff, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x00, 0x1a, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0xa8, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0xc4, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1a, 0x07, 0xe0, 0x00,
	0x00, 0x00, 0x2a, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08, 0x40, 0x36, 0x08, 0x40, 0x36, 0x4c, 0x00, 0x68, 0xff, 0x0b, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x08,
	0x40, 0x36, 0x36, 0x08, 0x08, 0x36, 0x4c, 0x00, 0x56, 0xff, 0x0b, 0x5b, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x94, 0xfe, 0x12, 0x00, 0xda, 0xfe, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c,
	0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x76, 0xff, 0x12, 0x08, 0x25, 0x5c, 0x12, 0x00, 0x7a, 0xff, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x40, 0x4c, 0x00, 0xec, 0xfd, 0x5c, 0x5b, 0x00,
} };
#elif defined(_M_IX86)
#pragma optimize("", off) 
DWORD RpcOpenPrinter(STRING_HANDLE pPrinterName, PRINTER_HANDLE* pHandle, wchar_t* pDatatype, DEVMODE_CONTAINER* pDevModeContainer, DWORD AccessRequired)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[0], (unsigned char*)&pPrinterName).Simple;
}
DWORD RpcEnumPrinterDrivers(STRING_HANDLE pName, wchar_t* pEnvironment, DWORD Level, BYTE* pDrivers, DWORD cbBuf, DWORD* pcbNeeded, DWORD* pcReturned)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[66], (unsigned char*)&pName).Simple;
}
DWORD RpcGetPrinterDriverDirectory(STRING_HANDLE pName, wchar_t* pEnvironment, DWORD Level, BYTE* pDriverDirectory, DWORD cbBuf, DWORD* pcbNeeded)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[144], (unsigned char*)&pName).Simple;
}
DWORD RpcClosePrinter(PRINTER_HANDLE* phPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[216], (unsigned char*)&phPrinter).Simple;
}
DWORD RpcFindClosePrinterChangeNotification(PRINTER_HANDLE hPrinter)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[258], (unsigned char*)&hPrinter).Simple;
}
DWORD RpcRemoteFindFirstPrinterChangeNotification(PRINTER_HANDLE hPrinter, DWORD fdwFlags, DWORD fdwOptions, wchar_t* pszLocalMachine, DWORD dwPrinterLocal, DWORD cbBuffer, BYTE* pBuffer)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[300], (unsigned char*)&hPrinter).Simple;
}
DWORD RpcDeletePrinterDriverEx(STRING_HANDLE pName, wchar_t* pEnvironment, wchar_t* pDriverName, DWORD dwDeleteFlag, DWORD dwVersionNum)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[376], (unsigned char*)&pName).Simple;
}
DWORD RpcAddPrinterDriverEx(STRING_HANDLE pName, DRIVER_CONTAINER* pDriverContainer, DWORD dwFileCopyFlags)
{
	return (DWORD)NdrClientCall2((PMIDL_STUB_DESC)&winspool_StubDesc, (PFORMAT_STRING)&ms2Drprn__MIDL_ProcFormatString.Format[444], (unsigned char*)&pName).Simple;
}
#pragma optimize("", on)
static const ms2Drprn_MIDL_PROC_FORMAT_STRING ms2Drprn__MIDL_ProcFormatString = { 0, {
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x31, 0x04, 0x00, 0x00, 0x00, 0x5c, 0x08, 0x00, 0x40, 0x00, 0x46, 0x06, 0x08, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x10, 0x01, 0x04, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0b, 0x01, 0x0c, 0x00, 0x1e, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x70, 0x00, 0x14, 0x00,
	0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x20, 0x00, 0x31, 0x04, 0x00, 0x00, 0x00, 0x5c, 0x10, 0x00, 0x40, 0x00, 0x47, 0x08, 0x08, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x0c, 0x00, 0x32, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x50, 0x21,
	0x14, 0x00, 0x08, 0x00, 0x50, 0x21, 0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x1c, 0x00, 0x31, 0x04, 0x00, 0x00, 0x00, 0x5c,
	0x10, 0x00, 0x24, 0x00, 0x47, 0x07, 0x08, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00,
	0x1b, 0x00, 0x0c, 0x00, 0x32, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x50, 0x21, 0x14, 0x00, 0x08, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00,
	0x08, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x40, 0x00, 0x44, 0x02, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x4a, 0x00, 0x70, 0x00, 0x04, 0x00,
	0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x08, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x08, 0x00, 0x44, 0x02, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x70, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x20, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x08, 0x00,
	0x47, 0x08, 0x08, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x48, 0x00, 0x04, 0x00, 0x08, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x0c, 0x00,
	0x02, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x88, 0x00, 0x14, 0x00, 0x52, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x5c, 0x00, 0x70, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
	0x54, 0x00, 0x18, 0x00, 0x31, 0x04, 0x00, 0x00, 0x00, 0x5c, 0x10, 0x00, 0x08, 0x00, 0x46, 0x06, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x01,
	0x04, 0x00, 0x6e, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x6e, 0x00, 0x48, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x70, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00,
	0x00, 0x00, 0x59, 0x00, 0x10, 0x00, 0x31, 0x04, 0x00, 0x00, 0x00, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x46, 0x04, 0x08, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x0b, 0x01, 0x04, 0x00, 0xca, 0x03, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x00,
} };
static const ms2Drprn_MIDL_TYPE_FORMAT_STRING ms2Drprn__MIDL_TypeFormatString = { 0, {
	0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xa0, 0x00, 0x00, 0x11, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x16, 0x03,
	0x08, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x00, 0xe6, 0xff, 0x5b, 0x08, 0x08, 0x5b, 0x12, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x29, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x02, 0x5b, 0x11, 0x0c, 0x08, 0x5c, 0x11, 0x04, 0x02, 0x00, 0x30, 0xe1, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x12, 0x00, 0x02, 0x00,
	0x1b, 0x00, 0x01, 0x00, 0x29, 0x00, 0x14, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x11, 0x08, 0x25, 0x5c, 0x11, 0x00, 0x58, 0x03, 0x2b, 0x09, 0x09, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00,
	0x06, 0x30, 0x01, 0x00, 0x00, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x00, 0x03, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00, 0x00, 0x00, 0xea, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6e, 0x01,
	0x08, 0x00, 0x00, 0x00, 0x20, 0x02, 0xff, 0xff, 0x12, 0x00, 0x02, 0x00, 0x16, 0x03, 0x04, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x5c, 0x5b,
	0x12, 0x00, 0x02, 0x00, 0x16, 0x03, 0x18, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x5b, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x24, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x16, 0x03, 0x2c, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08,
	0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0x96, 0xff, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x5c, 0x5b, 0x12, 0x00, 0x0e, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x2c, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x16, 0x03, 0x34, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08,
	0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0x18, 0xff, 0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00, 0x8c, 0xff, 0x5b, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x5c, 0x5b, 0x12, 0x00, 0x0a, 0x00, 0x15, 0x03, 0x08, 0x00, 0x08, 0x08, 0x5c, 0x5b, 0x16, 0x07, 0x58, 0x00, 0x4b, 0x5c, 0x46, 0x5c,
	0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00,
	0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0x92, 0xfe, 0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00,
	0x06, 0xff, 0x46, 0x5c, 0x48, 0x00, 0x48, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x4c, 0x00, 0x4c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x50, 0x00, 0x50, 0x00, 0x12, 0x08, 0x25, 0x5c,
	0x46, 0x5c, 0x54, 0x00, 0x54, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x56, 0xff, 0x40, 0x0b, 0x08, 0x08,
	0x08, 0x08, 0x5c, 0x5b, 0x12, 0x00, 0x1a, 0x00, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x60, 0x00, 0x01, 0x00, 0x05, 0x5b, 0x1b, 0x01, 0x02, 0x00, 0x19, 0x00, 0x70, 0x00, 0x01, 0x00, 0x05, 0x5b,
	0x16, 0x07, 0x88, 0x00, 0x4b, 0x5c, 0x46, 0x5c, 0x04, 0x00, 0x04, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x08, 0x00, 0x08, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x0c, 0x00, 0x0c, 0x00,
	0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x10, 0x00, 0x10, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x14, 0x00, 0x14, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x18, 0x00, 0x18, 0x00, 0x12, 0x08,
	0x25, 0x5c, 0x46, 0x5c, 0x1c, 0x00, 0x1c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x20, 0x00, 0x20, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x28, 0x00, 0x28, 0x00, 0x12, 0x00, 0xca, 0xfd,
	0x46, 0x5c, 0x30, 0x00, 0x30, 0x00, 0x12, 0x00, 0x3e, 0xfe, 0x46, 0x5c, 0x48, 0x00, 0x48, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x4c, 0x00, 0x4c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c,
	0x50, 0x00, 0x50, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x54, 0x00, 0x54, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x58, 0x00, 0x58, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x5c, 0x00,
	0x5c, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x64, 0x00, 0x64, 0x00, 0x12, 0x00, 0x3a, 0xff, 0x46, 0x5c, 0x68, 0x00, 0x68, 0x00, 0x12, 0x08, 0x25, 0x5c, 0x46, 0x5c, 0x74, 0x00, 0x74, 0x00,
	0x12, 0x00, 0x32, 0xff, 0x5b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x5c, 0xfe, 0x40, 0x0b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x4c, 0x00, 0x4a, 0xfe, 0x0b, 0x5b, 0x1a, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x00, 0x9f, 0xfc, 0x5b, 0x00,
} };
#endif


extern "C" VOID WINAPI RtlFreeUnicodeString(IN OUT PUNICODE_STRING UnicodeString);
extern "C" VOID WINAPI RtlGetNtVersionNumbers(LPDWORD pMajor, LPDWORD pMinor, LPDWORD pBuild);
extern "C" NTSTATUS WINAPI RtlStringFromGUID(IN LPCGUID Guid, PUNICODE_STRING UnicodeString);

DWORD _NT_MAJOR_VERSION, _NT_MINOR_VERSION, _NT_BUILD_NUMBER;
